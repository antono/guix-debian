-*- mode: org -*-

[[http://www.gnu.org/software/guix/][GNU Guix]] (IPA: /ɡiːks/) is a purely functional package manager, and
associated free software distribution, for the [[http://www.gnu.org/gnu/gnu.html][GNU system]].  In addition
to standard package management features, Guix supports transactional
upgrades and roll-backs, unprivileged package management, per-user
profiles, and garbage collection.

It provides [[http://www.gnu.org/software/guile/][Guile]] Scheme APIs, including a high-level embedded
domain-specific languages (EDSLs) to describe how packages are to be
built and composed.

A user-land free software distribution for GNU/Linux comes as part of
Guix.

Guix is based on the [[http://nixos.org/nix/][Nix]] package manager.


* Requirements

GNU Guix currently depends on the following packages:

  - [[http://gnu.org/software/guile/][GNU Guile 2.0.x]], version 2.0.5 or later
  - [[http://gnupg.org/][GNU libgcrypt]]

Unless `--disable-daemon' was passed, the following packages are needed:

  - [[http://sqlite.org/][SQLite 3]]
  - [[http://www.bzip.org][libbz2]]
  - [[http://gcc.gnu.org][GCC's g++]]

When `--disable-daemon' was passed, you instead need the following:

  - [[http://nixos.org/nix/][Nix]]

* Installation

See the manual for the installation instructions, either by running

  info -f doc/guix.info "(guix) Installation"

or by checking the [[http://www.gnu.org/software/guix/manual/guix.html#Installation][web copy of the manual]].

For information on installation from a Git checkout, please see the ‘HACKING’
file.

* Installing Guix from Guix

You can re-build and re-install Guix using a system that already runs Guix.
To do so:

  - Install the dependencies (see 'Requirements' above) and build tools using
    Guix.  You should have the following packages installed in your user
    profile:

    - autoconf
    - automake
    - bzip2
    - gcc
    - gettext
    - glibc
    - guile
    - ld-wrapper
    - libgcrypt
    - pkg-config
    - sqlite

  - set the environment variables that Guix recommends you to set during the
    package installation process:
      ACLOCAL, CPATH, LIBRARY_PATH, PATH, PKG_CONFIG_PATH
    In addition, set 
      GUIX_LD_WRAPPER_ALLOW_IMPURITIES=yes

  - re-run the configure script passing it the option
    `--with-libgcrypt-prefix=$HOME/.guix-profile/'

  - run "make" and "make install"

* How It Works

Guix does the high-level preparation of a /derivation/.  A derivation is
the promise of a build; it is stored as a text file under
=/nix/store/xxx.drv=.  The (guix derivations) module provides the
`derivation' primitive, as well as higher-level wrappers such as
`build-expression->derivation'.

Guix does remote procedure calls (RPCs) to the Guix or Nix daemon (the
=guix-daemon= or =nix-daemon= command), which in turn performs builds
and accesses to the Nix store on its behalf.  The RPCs are implemented
in the (guix store) module.

* Installing Guix as non-root

The Guix daemon allows software builds to be performed under alternate
user accounts, which are normally created specifically for this
purpose.  For instance, you may have a pool of accounts in the
=guixbuild= group, and then you can instruct =guix-daemon= to use them
like this:

  $ guix-daemon --build-users-group=guixbuild

However, unless it is run as root, =guix-daemon= cannot switch users.
In that case, it falls back to using a setuid-root helper program call
=nix-setuid-helper=.  That program is not setuid-root by default when
you install it; instead you should run a command along these lines
(assuming Guix is installed under /usr/local):

  # chown root.root /usr/local/libexec/nix-setuid-helper
  # chmod 4755 /usr/local/libexec/nix-setuid-helper

* Contact

GNU Guix is hosted at https://savannah.gnu.org/projects/guix/.

Please email <bug-guix@gnu.org> for bug reports or questions regarding
Guix and its distribution; email <gnu-system-discuss@gnu.org> for
general issues regarding the GNU system.

Join #guix on irc.freenode.net.

* Guix & Nix

GNU Guix is based on [[http://nixos.org/nix/][the Nix package manager]].  It implements the same
package deployment paradigm, and in fact it reuses some of its code.
Yet, different engineering decisions were made for Guix, as described
below.

Nix is really two things: a package build tool, implemented by a library
and daemon, and a special-purpose programming language.  GNU Guix relies
on the former, but uses Scheme as a replacement for the latter.

Using Scheme instead of a specific language allows us to get all the
features and tooling that come with Guile (compiler, debugger, REPL,
Unicode, libraries, etc.)  And it means that we have a general-purpose
language, on top of which we can have embedded domain-specific languages
(EDSLs), such as the one used to define packages.  This broadens what
can be done in package recipes themselves, and what can be done around them.

Technically, Guix makes remote procedure calls to the ‘nix-worker’
daemon to perform operations on the store.  At the lowest level, Nix
“derivations” represent promises of a build, stored in ‘.drv’ files in
the store.  Guix produces such derivations, which are then interpreted
by the daemon to perform the build.  Thus, Guix derivations can use
derivations produced by Nix (and vice versa).

With Nix and the [[http://nixos.org/nixpkgs][Nixpkgs]] distribution, package composition happens at
the Nix language level, but builders are usually written in Bash.
Conversely, Guix encourages the use of Scheme for both package
composition and builders.  Likewise, the core functionality of Nix is
written in C++ and Perl; Guix relies on some of the original C++ code,
but exposes all the API as Scheme.

* Related software

  - [[http://nixos.org][Nix, Nixpkgs, and NixOS]], functional package manager and associated
    software distribution, are the inspiration of Guix
  - [[http://www.gnu.org/software/stow/][GNU Stow]] builds around the idea of one directory per prefix, and a
    symlink tree to create user environments
  - [[http://www.pvv.ntnu.no/~arnej/store/storedoc_6.html][STORE]] shares the same idea
  - [[https://live.gnome.org/OSTree/][GNOME's OSTree]] allows bootable system images to be built from a
    specified set of packages
  - The [[http://www.gnu.org/s/gsrc/][GNU Source Release Collection]] (GSRC) is a user-land software
    distribution; unlike Guix, it relies on core tools available on the
    host system
