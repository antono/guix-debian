# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Ludovic Courtès
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: guix 0.4\n"
"Report-Msgid-Bugs-To: ludo@gnu.org\n"
"POT-Creation-Date: 2013-09-27 14:51+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: gnu/packages.scm:94
#, scheme-format
msgid "cannot access `~a': ~a~%"
msgstr ""

#: gnu/packages/base.scm:65
msgid "Hello, GNU world: An example GNU package"
msgstr ""

#: gnu/packages/base.scm:66
msgid "Yeah..."
msgstr ""

#: gnu/packages/base.scm:82
msgid "Print lines matching a pattern"
msgstr ""

#: gnu/packages/base.scm:84
msgid ""
"The grep command searches one or more input files for lines containing a\n"
"match to a specified pattern.  By default, grep prints the matching\n"
"lines."
msgstr ""

#: gnu/packages/base.scm:102
msgid "Stream editor"
msgstr ""

#: gnu/packages/base.scm:117
msgid ""
"Sed (stream editor) isn't really a true text editor or text processor.\n"
"Instead, it is used to filter text, i.e., it takes text input and performs\n"
"some operation (or set of operations) on it and outputs the modified text.\n"
"Sed is typically used for extracting part of a file using pattern matching "
"or\n"
"substituting multiple occurrences of a string within a file."
msgstr ""

#: gnu/packages/base.scm:140
msgid "Managing tar archives"
msgstr ""

#: gnu/packages/base.scm:142
msgid ""
"The Tar program provides the ability to create tar archives, as well as\n"
"various other kinds of manipulation.  For example, you can use Tar on\n"
"previously created archives to extract files, to store additional files, or\n"
"to update or list files which were already stored.\n"
"\n"
"Initially, tar archives were used to store files conveniently on magnetic\n"
"tape.  The name \"Tar\" comes from this use; it stands for tape archiver.\n"
"Despite the utility's name, Tar can direct its output to available devices,\n"
"files, or other programs (using pipes), it can even access remote devices "
"or\n"
"files (as archives)."
msgstr ""

#: gnu/packages/base.scm:173
msgid "Apply differences to originals, with optional backups"
msgstr ""

#: gnu/packages/base.scm:175
msgid ""
"GNU Patch takes a patch file containing a difference listing produced by\n"
"the diff program and applies those differences to one or more original "
"files,\n"
"producing patched versions."
msgstr ""

#: gnu/packages/base.scm:193
msgid "Comparing and merging files"
msgstr ""

#: gnu/packages/base.scm:195
msgid ""
"GNU Diffutils is a package of several programs related to finding\n"
"differences between files.\n"
"\n"
"Computer users often find occasion to ask how two files differ. Perhaps one\n"
"file is a newer version of the other file. Or maybe the two files started "
"out\n"
"as identical copies but were changed by different people.\n"
"\n"
"You can use the diff command to show differences between two files, or each\n"
"corresponding file in two directories. diff outputs differences between "
"files\n"
"line by line in any of several formats, selectable by command line\n"
"options. This set of differences is often called a ‘diff’ or ‘patch’. For\n"
"files that are identical, diff normally produces no output; for\n"
"binary (non-text) files, diff normally reports only that they are "
"different.\n"
"\n"
"You can use the cmp command to show the offsets and line numbers where two\n"
"files differ. cmp can also show all the characters that differ between the\n"
"two files, side by side.\n"
"\n"
"You can use the diff3 command to show differences among three files. When "
"two\n"
"people have made independent changes to a common original, diff3 can report\n"
"the differences between the original and the two changed versions, and can\n"
"produce a merged file that contains both persons' changes together with\n"
"warnings about conflicts.\n"
"\n"
"You can use the sdiff command to merge two files interactively."
msgstr ""

#: gnu/packages/base.scm:246
msgid "Operating on files matching given criteria"
msgstr ""

#: gnu/packages/base.scm:248
msgid ""
"The GNU Find Utilities are the basic directory searching utilities of\n"
"the GNU operating system.  These programs are typically used in conjunction\n"
"with other programs to provide modular and powerful directory search and "
"file\n"
"locating capabilities to other commands.\n"
"\n"
"The tools supplied with this package are:\n"
"\n"
"  * find - search for files in a directory hierarchy;\n"
"  * locate - list files in databases that match a pattern;\n"
"  * updatedb - update a file name database;\n"
"  * xargs - build and execute command lines from standard input.\n"
msgstr ""

#: gnu/packages/base.scm:298
msgid "Core GNU utilities (file, text, shell)"
msgstr ""

#: gnu/packages/base.scm:300
msgid ""
"The GNU Core Utilities are the basic file, shell and text manipulation\n"
"utilities of the GNU operating system.  These are the core utilities which\n"
"are expected to exist on every operating system."
msgstr ""

#: gnu/packages/base.scm:333
msgid "Remake files automatically"
msgstr ""

#: gnu/packages/base.scm:335
msgid ""
"Make is a tool which controls the generation of executables and other\n"
"non-source files of a program from the program's source files.\n"
"\n"
"Make gets its knowledge of how to build your program from a file called the\n"
"makefile, which lists each of the non-source files and how to compute it "
"from\n"
"other files. When you write a program, you should write a makefile for it, "
"so\n"
"that it is possible to use Make to build and install the program."
msgstr ""

#: gnu/packages/base.scm:379
msgid "Binary utilities: bfd gas gprof ld"
msgstr ""

#: gnu/packages/base.scm:381
msgid ""
"The GNU Binutils are a collection of binary tools.  The main ones are\n"
"`ld' (the GNU linker) and `as' (the GNU assembler).  They also include the\n"
"BFD (Binary File Descriptor) library, `gprof', `nm', `strip', etc."
msgstr ""

#: gnu/packages/base.scm:502
msgid "The GNU C Library"
msgstr ""

#: gnu/packages/base.scm:504
msgid ""
"Any Unix-like operating system needs a C library: the library which\n"
"defines the \"system calls\" and other basic facilities such as open, "
"malloc,\n"
"printf, exit...\n"
"\n"
"The GNU C library is used as the C library in the GNU system and most "
"systems\n"
"with the Linux kernel."
msgstr ""

#: gnu/packages/base.scm:573
msgid "Database of current and historical time zones"
msgstr ""

#: gnu/packages/base.scm:574
msgid ""
"The Time Zone Database (often called tz or zoneinfo)\n"
"contains code and data that represent the history of local time for many\n"
"representative locations around the globe. It is updated periodically to\n"
"reflect changes made by political bodies to time zone boundaries, UTC "
"offsets,\n"
"and daylight-saving rules."
msgstr ""

#: gnu/packages/base.scm:992
msgid "The linker wrapper"
msgstr ""

#: gnu/packages/base.scm:994
msgid ""
"The linker wrapper (or `ld-wrapper') wraps the linker to add any\n"
"missing `-rpath' flags, and to detect any misuse of libraries outside of "
"the\n"
"store."
msgstr ""

#: gnu/packages/guile.scm:97 gnu/packages/guile.scm:166
msgid "Scheme implementation intended especially for extensions"
msgstr ""

#: gnu/packages/guile.scm:99
msgid ""
"GNU Guile 1.8 is an interpreter for the Scheme programming language,\n"
"packaged as a library that can be embedded into programs to make them\n"
"extensible.  It supports many SRFIs."
msgstr ""

#: gnu/packages/guile.scm:168
msgid ""
"GNU Guile is an implementation of the Scheme programming language, with\n"
"support for many SRFIs, packaged for use in a wide variety of environments.\n"
"In addition to implementing the R5RS Scheme standard and a large subset of\n"
"R6RS, Guile includes a module system, full access to POSIX system calls,\n"
"networking support, multiple threads, dynamic linking, a foreign function\n"
"call interface, and powerful string processing."
msgstr ""

#: gnu/packages/guile.scm:212
msgid "Framework for building readers for GNU Guile"
msgstr ""

#: gnu/packages/guile.scm:214
msgid ""
"Guile-Reader is a simple framework for building readers for GNU Guile.\n"
"\n"
"The idea is to make it easy to build procedures that extend Guile’s read\n"
"procedure. Readers supporting various syntax variants can easily be "
"written,\n"
"possibly by re-using existing “token readers” of a standard Scheme\n"
"readers. For example, it is used to implement Skribilo’s R5RS-derived\n"
"document syntax.\n"
"\n"
"Guile-Reader’s approach is similar to Common Lisp’s “read table”, but\n"
"hopefully more powerful and flexible (for instance, one may instantiate as\n"
"many readers as needed)."
msgstr ""

#: gnu/packages/guile.scm:266
msgid "Guile bindings to ncurses"
msgstr ""

#: gnu/packages/guile.scm:268
msgid ""
"GNU Guile-Ncurses is a library for the Guile Scheme interpreter that\n"
"provides functions for creating text user interfaces.  The text user "
"interface\n"
"functionality is built on the ncurses libraries: curses, form, panel, and\n"
"menu."
msgstr ""

#: gnu/packages/guile.scm:292
msgid "Run jobs at scheduled times"
msgstr ""

#: gnu/packages/guile.scm:294
msgid ""
"The GNU package mcron (Mellor's cron) is a 100% compatible replacement\n"
"for Vixie cron.  It is written in pure Guile, and allows configuration "
"files\n"
"to be written in scheme (as well as Vixie's original format) for infinite\n"
"flexibility in specifying when jobs should be run.  Mcron was written by "
"Dale\n"
"Mellor."
msgstr ""

#: gnu/packages/guile.scm:323
msgid "Collection of useful Guile Scheme modules"
msgstr ""

#: gnu/packages/guile.scm:325
msgid ""
"guile-lib is intended as an accumulation place for pure-scheme Guile\n"
"modules, allowing for people to cooperate integrating their generic Guile\n"
"modules into a coherent library.  Think \"a down-scaled, limited-scope CPAN\n"
"for Guile\"."
msgstr ""

#: gnu/packages/lout.scm:109
msgid "Lout, a document layout system similar in style to LaTeX"
msgstr ""

#: gnu/packages/lout.scm:111
msgid ""
"The Lout document formatting system is now reads a high-level description "
"of\n"
"a document similar in style to LaTeX and produces a PostScript or plain "
"text\n"
"output file.\n"
"\n"
"Lout offers an unprecedented range of advanced features, including optimal\n"
"paragraph and page breaking, automatic hyphenation, PostScript EPS file\n"
"inclusion and generation, equation formatting, tables, diagrams, rotation "
"and\n"
"scaling, sorted indexes, bibliographic databases, running headers and\n"
"odd-even pages, automatic cross referencing, multilingual documents "
"including\n"
"hyphenation (most European languages are supported), formatting of computer\n"
"programs, and much more, all ready to use.  Furthermore, Lout is easily\n"
"extended with definitions which are very much easier to write than troff of\n"
"TeX macros because Lout is a high-level, purely functional language, the\n"
"outcome of an eight-year research project that went back to the\n"
"beginning."
msgstr ""

#: gnu/packages/recutils.scm:49
msgid "Manipulate plain text files as databases"
msgstr ""

#: gnu/packages/recutils.scm:51
msgid ""
"GNU recutils is a set of tools and libraries to access human-editable,\n"
"text-based databases called recfiles.  The data is stored as a sequence of\n"
"records, each record containing an arbitrary number of named fields."
msgstr ""

#: guix/scripts/build.scm:51
#, scheme-format
msgid "package `~a' has no source~%"
msgstr ""

#: guix/scripts/build.scm:68
msgid ""
"Usage: guix build [OPTION]... PACKAGE-OR-DERIVATION...\n"
"Build the given PACKAGE-OR-DERIVATION and return their output paths.\n"
msgstr ""

#: guix/scripts/build.scm:70
msgid ""
"\n"
"  -e, --expression=EXPR  build the package EXPR evaluates to"
msgstr ""

#: guix/scripts/build.scm:72
msgid ""
"\n"
"  -S, --source           build the packages' source derivations"
msgstr ""

#: guix/scripts/build.scm:74
msgid ""
"\n"
"  -s, --system=SYSTEM    attempt to build for SYSTEM--e.g., \"i686-linux\""
msgstr ""

#: guix/scripts/build.scm:76
msgid ""
"\n"
"      --target=TRIPLET   cross-build for TRIPLET--e.g., \"armel-linux-gnu\""
msgstr ""

#: guix/scripts/build.scm:78
msgid ""
"\n"
"  -d, --derivations      return the derivation paths of the given packages"
msgstr ""

#: guix/scripts/build.scm:80
msgid ""
"\n"
"  -K, --keep-failed      keep build tree of failed builds"
msgstr ""

#: guix/scripts/build.scm:82
msgid ""
"\n"
"  -n, --dry-run          do not build the derivations"
msgstr ""

#: guix/scripts/build.scm:84 guix/scripts/package.scm:533
msgid ""
"\n"
"      --fallback         fall back to building when the substituter fails"
msgstr ""

#: guix/scripts/build.scm:86 guix/scripts/package.scm:535
msgid ""
"\n"
"      --no-substitutes   build instead of resorting to pre-built substitutes"
msgstr ""

#: guix/scripts/build.scm:88 guix/scripts/package.scm:537
msgid ""
"\n"
"      --max-silent-time=SECONDS\n"
"                         mark the build as failed after SECONDS of silence"
msgstr ""

#: guix/scripts/build.scm:91
msgid ""
"\n"
"  -c, --cores=N          allow the use of up to N CPU cores for the build"
msgstr ""

#: guix/scripts/build.scm:93
msgid ""
"\n"
"  -r, --root=FILE        make FILE a symlink to the result, and register it\n"
"                         as a garbage collector root"
msgstr ""

#: guix/scripts/build.scm:96
msgid ""
"\n"
"      --verbosity=LEVEL  use the given verbosity LEVEL"
msgstr ""

#: guix/scripts/build.scm:99 guix/scripts/download.scm:53
#: guix/scripts/package.scm:554 guix/scripts/gc.scm:58
#: guix/scripts/hash.scm:51 guix/scripts/pull.scm:150
#: guix/scripts/substitute-binary.scm:463
msgid ""
"\n"
"  -h, --help             display this help and exit"
msgstr ""

#: guix/scripts/build.scm:101 guix/scripts/download.scm:55
#: guix/scripts/package.scm:556 guix/scripts/gc.scm:60
#: guix/scripts/hash.scm:53 guix/scripts/pull.scm:152
#: guix/scripts/substitute-binary.scm:465
msgid ""
"\n"
"  -V, --version          display version information and exit"
msgstr ""

#: guix/scripts/build.scm:141
#, scheme-format
msgid "~a: not a number~%"
msgstr ""

#: guix/scripts/build.scm:176 guix/scripts/download.scm:96
#: guix/scripts/package.scm:646 guix/scripts/gc.scm:152
#: guix/scripts/pull.scm:179
#, scheme-format
msgid "~A: unrecognized option~%"
msgstr ""

#: guix/scripts/build.scm:202
#, scheme-format
msgid "failed to create GC root `~a': ~a~%"
msgstr ""

#: guix/scripts/build.scm:226 guix/scripts/package.scm:692
#, scheme-format
msgid "ambiguous package specification `~a'~%"
msgstr ""

#: guix/scripts/build.scm:227 guix/scripts/package.scm:694
#, scheme-format
msgid "choosing ~a from ~a~%"
msgstr ""

#: guix/scripts/build.scm:233
#, scheme-format
msgid "~A: package not found for version ~a~%"
msgstr ""

#: guix/scripts/build.scm:235
#, scheme-format
msgid "~A: unknown package~%"
msgstr ""

#: guix/scripts/download.scm:44
msgid ""
"Usage: guix download [OPTION] URL\n"
"Download the file at URL, add it to the store, and print its store path\n"
"and the hash of its contents.\n"
"\n"
"Supported formats: 'nix-base32' (default), 'base32', and 'base16'\n"
"('hex' and 'hexadecimal' can be used as well).\n"
msgstr ""

#: guix/scripts/download.scm:50 guix/scripts/hash.scm:48
msgid ""
"\n"
"  -f, --format=FMT       write the hash in the given format"
msgstr ""

#: guix/scripts/download.scm:73 guix/scripts/hash.scm:71
#, scheme-format
msgid "unsupported hash format: ~a~%"
msgstr ""

#: guix/scripts/download.scm:106
#, scheme-format
msgid "~a: failed to parse URI~%"
msgstr ""

#: guix/scripts/download.scm:117
#, scheme-format
msgid "~a: download failed~%"
msgstr ""

#: guix/scripts/package.scm:222
#, scheme-format
msgid "failed to build the empty profile~%"
msgstr ""

#: guix/scripts/package.scm:232
#, scheme-format
msgid "switching from generation ~a to ~a~%"
msgstr ""

#: guix/scripts/package.scm:244 guix/scripts/package.scm:881
#: guix/scripts/package.scm:1064
#, scheme-format
msgid "profile '~a' does not exist~%"
msgstr ""

#: guix/scripts/package.scm:248
#, scheme-format
msgid "nothing to do: already at the empty profile~%"
msgstr ""

#: guix/scripts/package.scm:424
#, scheme-format
msgid "looking for the latest release of GNU ~a..."
msgstr ""

#: guix/scripts/package.scm:428
#, scheme-format
msgid "~a: note: using ~a but ~a is available upstream~%"
msgstr ""

#: guix/scripts/package.scm:492
#, scheme-format
msgid "The following environment variable definitions may be needed:~%"
msgstr ""

#: guix/scripts/package.scm:507
msgid ""
"Usage: guix package [OPTION]... PACKAGES...\n"
"Install, remove, or upgrade PACKAGES in a single transaction.\n"
msgstr ""

#: guix/scripts/package.scm:509
msgid ""
"\n"
"  -i, --install=PACKAGE  install PACKAGE"
msgstr ""

#: guix/scripts/package.scm:511
msgid ""
"\n"
"  -e, --install-from-expression=EXP\n"
"                         install the package EXP evaluates to"
msgstr ""

#: guix/scripts/package.scm:514
msgid ""
"\n"
"  -r, --remove=PACKAGE   remove PACKAGE"
msgstr ""

#: guix/scripts/package.scm:516
msgid ""
"\n"
"  -u, --upgrade[=REGEXP] upgrade all the installed packages matching REGEXP"
msgstr ""

#: guix/scripts/package.scm:518
msgid ""
"\n"
"      --roll-back        roll back to the previous generation"
msgstr ""

#: guix/scripts/package.scm:520
msgid ""
"\n"
"      --search-paths     display needed environment variable definitions"
msgstr ""

#: guix/scripts/package.scm:522
msgid ""
"\n"
"  -l, --list-generations[=PATTERN]\n"
"                         list generations matching PATTERN"
msgstr ""

#: guix/scripts/package.scm:525
msgid ""
"\n"
"  -d, --delete-generations[=PATTERN]\n"
"                         delete generations matching PATTERN"
msgstr ""

#: guix/scripts/package.scm:529
msgid ""
"\n"
"  -p, --profile=PROFILE  use PROFILE instead of the user's default profile"
msgstr ""

#: guix/scripts/package.scm:531
msgid ""
"\n"
"  -n, --dry-run          show what would be done without actually doing it"
msgstr ""

#: guix/scripts/package.scm:540
msgid ""
"\n"
"      --bootstrap        use the bootstrap Guile to build the profile"
msgstr ""

#: guix/scripts/package.scm:542 guix/scripts/pull.scm:145
msgid ""
"\n"
"      --verbose          produce verbose output"
msgstr ""

#: guix/scripts/package.scm:545
msgid ""
"\n"
"  -s, --search=REGEXP    search in synopsis and description using REGEXP"
msgstr ""

#: guix/scripts/package.scm:547
msgid ""
"\n"
"  -I, --list-installed[=REGEXP]\n"
"                         list installed packages matching REGEXP"
msgstr ""

#: guix/scripts/package.scm:550
msgid ""
"\n"
"  -A, --list-available[=REGEXP]\n"
"                         list available packages matching REGEXP"
msgstr ""

#: guix/scripts/package.scm:648
#, scheme-format
msgid "~A: extraneous argument~%"
msgstr ""

#: guix/scripts/package.scm:676
#, scheme-format
msgid "package `~a' lacks output `~a'~%"
msgstr ""

#: guix/scripts/package.scm:700
#, scheme-format
msgid "~a: package not found~%"
msgstr ""

#: guix/scripts/package.scm:723
#, scheme-format
msgid "Try \"info '(guix) Invoking guix package'\" for more information.~%"
msgstr ""

#: guix/scripts/package.scm:745
#, scheme-format
msgid "error: while creating directory `~a': ~a~%"
msgstr ""

#: guix/scripts/package.scm:749
#, scheme-format
msgid "Please create the `~a' directory, with you as the owner.~%"
msgstr ""

#: guix/scripts/package.scm:756
#, scheme-format
msgid "error: directory `~a' is not owned by you~%"
msgstr ""

#: guix/scripts/package.scm:759
#, scheme-format
msgid "Please change the owner of `~a' to user ~s.~%"
msgstr ""

#: guix/scripts/package.scm:817
#, scheme-format
msgid "The following package would be removed:~% ~{~a~%~}~%"
msgstr ""

#: guix/scripts/package.scm:822
#, scheme-format
msgid "The following package will be removed:~% ~{~a~%~}~%"
msgstr ""

#: guix/scripts/package.scm:834
#, scheme-format
msgid "The following package would be installed:~%~{~a~%~}~%"
msgstr ""

#: guix/scripts/package.scm:839
#, scheme-format
msgid "The following package will be installed:~%~{~a~%~}~%"
msgstr ""

#: guix/scripts/package.scm:851
#, scheme-format
msgid "deleting ~a~%"
msgstr ""

#: guix/scripts/package.scm:904 guix/scripts/package.scm:1078
#, scheme-format
msgid "invalid syntax: ~a~%"
msgstr ""

#: guix/scripts/package.scm:1016
#, scheme-format
msgid "nothing to be done~%"
msgstr ""

#: guix/scripts/package.scm:1027
#, scheme-format
msgid "~a package in profile~%"
msgstr ""

#: guix/scripts/package.scm:1042
#, scheme-format
msgid "Generation ~a\t~a"
msgstr ""

#: guix/scripts/package.scm:1049
#, scheme-format
msgid "~a\t(current)~%"
msgstr ""

#: guix/scripts/gc.scm:39
msgid ""
"Usage: guix gc [OPTION]... PATHS...\n"
"Invoke the garbage collector.\n"
msgstr ""

#: guix/scripts/gc.scm:41
msgid ""
"\n"
"  -C, --collect-garbage[=MIN]\n"
"                         collect at least MIN bytes of garbage"
msgstr ""

#: guix/scripts/gc.scm:44
msgid ""
"\n"
"  -d, --delete           attempt to delete PATHS"
msgstr ""

#: guix/scripts/gc.scm:46
msgid ""
"\n"
"      --list-dead        list dead paths"
msgstr ""

#: guix/scripts/gc.scm:48
msgid ""
"\n"
"      --list-live        list live paths"
msgstr ""

#: guix/scripts/gc.scm:51
msgid ""
"\n"
"      --references       list the references of PATHS"
msgstr ""

#: guix/scripts/gc.scm:53
msgid ""
"\n"
"  -R, --requisites       list the requisites of PATHS"
msgstr ""

#: guix/scripts/gc.scm:55
msgid ""
"\n"
"      --referrers        list the referrers of PATHS"
msgstr ""

#: guix/scripts/gc.scm:92
#, scheme-format
msgid "unknown unit: ~a~%"
msgstr ""

#: guix/scripts/gc.scm:93
#, scheme-format
msgid "invalid number: ~a~%"
msgstr ""

#: guix/scripts/gc.scm:114
#, scheme-format
msgid "invalid amount of storage: ~a~%"
msgstr ""

#: guix/scripts/hash.scm:43
msgid ""
"Usage: guix hash [OPTION] FILE\n"
"Return the cryptographic hash of FILE.\n"
"\n"
"Supported formats: 'nix-base32' (default), 'base32', and 'base16'\n"
"('hex' and 'hexadecimal' can be used as well).\n"
msgstr ""

#: guix/scripts/hash.scm:96
#, scheme-format
msgid "unrecognized option: ~a~%"
msgstr ""

#: guix/scripts/hash.scm:123 guix/ui.scm:187
#, scheme-format
msgid "~a~%"
msgstr ""

#: guix/scripts/hash.scm:126
#, scheme-format
msgid "wrong number of arguments~%"
msgstr ""

#: guix/scripts/pull.scm:143
msgid ""
"Usage: guix pull [OPTION]...\n"
"Download and deploy the latest version of Guix.\n"
msgstr ""

#: guix/scripts/pull.scm:147
msgid ""
"\n"
"      --bootstrap        use the bootstrap Guile to build the new Guix"
msgstr ""

#: guix/scripts/pull.scm:181
#, scheme-format
msgid "~A: unexpected argument~%"
msgstr ""

#: guix/scripts/pull.scm:190
msgid "failed to download up-to-date source, exiting\n"
msgstr ""

#: guix/scripts/pull.scm:209
#, scheme-format
msgid "updated ~a successfully deployed under `~a'~%"
msgstr ""

#: guix/scripts/pull.scm:212
#, scheme-format
msgid "failed to update Guix, check the build log~%"
msgstr ""

#: guix/scripts/pull.scm:214
msgid "Guix already up to date\n"
msgstr ""

#: guix/scripts/substitute-binary.scm:162
#, scheme-format
msgid "while fetching ~a: server is unresponsive~%"
msgstr ""

#: guix/scripts/substitute-binary.scm:164
#, scheme-format
msgid "try `--no-substitutes' if the problem persists~%"
msgstr ""

#: guix/scripts/substitute-binary.scm:425
#, scheme-format
msgid "Downloading, please wait...~%"
msgstr ""

#: guix/scripts/substitute-binary.scm:427
#, scheme-format
msgid "(Please consider upgrading Guile to get proper progress report.)~%"
msgstr ""

#: guix/scripts/substitute-binary.scm:444
#, scheme-format
msgid "host name lookup error: ~a~%"
msgstr ""

#: guix/scripts/substitute-binary.scm:453
msgid ""
"Usage: guix substitute-binary [OPTION]...\n"
"Internal tool to substitute a pre-built binary to a local build.\n"
msgstr ""

#: guix/scripts/substitute-binary.scm:455
msgid ""
"\n"
"      --query            report on the availability of substitutes for the\n"
"                         store file names passed on the standard input"
msgstr ""

#: guix/scripts/substitute-binary.scm:458
msgid ""
"\n"
"      --substitute STORE-FILE DESTINATION\n"
"                         download STORE-FILE and store it as a Nar in file\n"
"                         DESTINATION"
msgstr ""

#: guix/scripts/substitute-binary.scm:567
#, scheme-format
msgid "~a: unrecognized options~%"
msgstr ""

#: guix/gnu-maintenance.scm:344
#, scheme-format
msgid "signature verification failed for `~a'~%"
msgstr ""

#: guix/gnu-maintenance.scm:346
#, scheme-format
msgid "(could be because the public key is not in your keyring)~%"
msgstr ""

#: guix/gnu-maintenance.scm:421
#, scheme-format
msgid "~a: could not locate source file"
msgstr ""

#: guix/gnu-maintenance.scm:426
#, scheme-format
msgid "~a: ~a: no `version' field in source; skipping~%"
msgstr ""

#: guix/ui.scm:120
#, scheme-format
msgid "failed to install locale: ~a~%"
msgstr ""

#: guix/ui.scm:142
#, scheme-format
msgid ""
"\n"
"Report bugs to: ~a."
msgstr ""

#: guix/ui.scm:144
#, scheme-format
msgid ""
"\n"
"~a home page: <~a>"
msgstr ""

#: guix/ui.scm:146
msgid ""
"\n"
"General help using GNU software: <http://www.gnu.org/gethelp/>"
msgstr ""

#: guix/ui.scm:153
#, scheme-format
msgid "~a: invalid number~%"
msgstr ""

#: guix/ui.scm:164
#, scheme-format
msgid "~a:~a:~a: package `~a' has an invalid input: ~s~%"
msgstr ""

#: guix/ui.scm:171
#, scheme-format
msgid "~a: ~a: build system `~a' does not support cross builds~%"
msgstr ""

#: guix/ui.scm:176
#, scheme-format
msgid "failed to connect to `~a': ~a~%"
msgstr ""

#: guix/ui.scm:181
#, scheme-format
msgid "build failed: ~a~%"
msgstr ""

#: guix/ui.scm:197
#, scheme-format
msgid "failed to read expression ~s: ~s~%"
msgstr ""

#: guix/ui.scm:203
#, scheme-format
msgid "failed to evaluate expression `~a': ~s~%"
msgstr ""

#: guix/ui.scm:207
#, scheme-format
msgid "expression `~s' does not evaluate to a package~%"
msgstr ""

#: guix/ui.scm:253
#, scheme-format
msgid "~:[The following derivation would be built:~%~{   ~a~%~}~;~]"
msgstr ""

#: guix/ui.scm:258
#, scheme-format
msgid "~:[The following file would be downloaded:~%~{   ~a~%~}~;~]"
msgstr ""

#: guix/ui.scm:264
#, scheme-format
msgid "~:[The following derivation will be built:~%~{   ~a~%~}~;~]"
msgstr ""

#: guix/ui.scm:269
#, scheme-format
msgid "~:[The following file will be downloaded:~%~{   ~a~%~}~;~]"
msgstr ""

#: guix/ui.scm:286
msgid "<unknown location>"
msgstr ""

#: guix/ui.scm:314
#, scheme-format
msgid "failed to create configuration directory `~a': ~a~%"
msgstr ""

#: guix/ui.scm:390 guix/ui.scm:400
msgid "unknown"
msgstr ""

#: guix/ui.scm:484
#, scheme-format
msgid "invalid argument: ~a~%"
msgstr ""

#: guix/ui.scm:489
#, scheme-format
msgid "Try `guix --help' for more information.~%"
msgstr ""

#: guix/ui.scm:516
msgid ""
"Usage: guix COMMAND ARGS...\n"
"Run COMMAND with ARGS.\n"
msgstr ""

#: guix/ui.scm:519
msgid "COMMAND must be one of the sub-commands listed below:\n"
msgstr ""

#: guix/ui.scm:538
#, scheme-format
msgid "guix: ~a: command not found~%"
msgstr ""

#: guix/ui.scm:556
#, scheme-format
msgid "guix: missing command name~%"
msgstr ""

#: guix/ui.scm:564
#, scheme-format
msgid "guix: unrecognized option '~a'~%"
msgstr ""

#: guix/http-client.scm:186
#, scheme-format
msgid "using Guile ~a, which does not support ~s encoding~%"
msgstr ""

#: guix/http-client.scm:189
#, scheme-format
msgid "download failed; use a newer Guile~%"
msgstr ""

#: guix/http-client.scm:201
#, scheme-format
msgid "following redirection to `~a'...~%"
msgstr ""
